diff --git a/benchmarks/MinimumSpanningForest/Boruvka/MinimumSpanningForest.h b/benchmarks/MinimumSpanningForest/Boruvka/MinimumSpanningForest.h
index c23ce3bf..ee0d370c 100644
--- a/benchmarks/MinimumSpanningForest/Boruvka/MinimumSpanningForest.h
+++ b/benchmarks/MinimumSpanningForest/Boruvka/MinimumSpanningForest.h
@@ -65,8 +65,8 @@ inline size_t Boruvka(edge_array<W>& E, uintE*& vtxs, uintE*& next_vtxs,
   size_t round = 0;
 
   while (n > 1 && m > 0) {
-    gbbs_debug(std::cout << "Boruvka round: " << round << " n: " << n << " m: " << m
-                    << "\n";);
+    // gbbs_debug(std::cout << "Boruvka round: " << round << " n: " << n << " m: " << m
+    //                 << "\n";);
 
     timer init_t;
     init_t.start();
@@ -129,8 +129,8 @@ inline size_t Boruvka(edge_array<W>& E, uintE*& vtxs, uintE*& next_vtxs,
     filter_t.start();
     n_in_mst += parlay::filterf(new_mst_edges.begin(), mst + n_in_mst, n,
                                 [](uintE v) { return v != UINT_E_MAX; });
-    gbbs_debug(std::cout << "      " << n_in_mst << " edges added to mst."
-                    << "\n";);
+    // gbbs_debug(std::cout << "      " << n_in_mst << " edges added to mst."
+    //                 << "\n";);
     filter_t.stop();
     gbbs_debug(filter_t.next("filter time"););
 
@@ -157,8 +157,8 @@ inline size_t Boruvka(edge_array<W>& E, uintE*& vtxs, uintE*& next_vtxs,
     std::swap(vtxs, next_vtxs);
     compact_t.stop();
     gbbs_debug(compact_t.next("compact time"););
-    gbbs_debug(std::cout << "      " << n << " vertices remain."
-                    << "\n";);
+    // gbbs_debug(std::cout << "      " << n << " vertices remain."
+    //                 << "\n";);
 
     // 6. relabel the edges with the new roots.
     timer relab_t;
@@ -183,18 +183,18 @@ inline size_t Boruvka(edge_array<W>& E, uintE*& vtxs, uintE*& next_vtxs,
 
     // 7. filter (or ignore) self-edges.
     auto self_loop_f = [&](size_t i) { return !(edge_ids[i] & TOP_BIT); };
-    auto self_loop_im = parlay::delayed_seq<bool>(n, self_loop_f);
+    auto self_loop_im = parlay::delayed_seq<bool>(m, self_loop_f);
     auto edge_ids_im = gbbs::make_slice(edge_ids, m);
     m = parlay::pack_out(edge_ids_im, self_loop_im,
                          gbbs::make_slice(next_edge_ids, m));
 
-    gbbs_debug(std::cout << "filter, m is now " << m << " n is now " << n << "\n";);
+    // gbbs_debug(std::cout << "filter, m is now " << m << " n is now " << n << "\n";);
     std::swap(edge_ids, next_edge_ids);
     round++;
   }
 
-  std::cout << "Boruvka finished: total edges added to MinimumSpanningForest = "
-            << n_in_mst << "\n";
+  // std::cout << "Boruvka finished: total edges added to MinimumSpanningForest = "
+  //           << n_in_mst << "\n";
   gbbs::free_array(edge_ids, m);
   gbbs::free_array(next_edge_ids, m);
   return n_in_mst;
@@ -280,9 +280,9 @@ inline edge_array<W> get_top_k(symmetric_graph<vertex, W>& G, size_t k,
 
   size_t weight_size = (last_ind - first_ind + 1);
   double split_wgh_fraction = ((1.0 * (last_ind - first_ind + 1)) / ssize);
-  gbbs_debug(std::cout << "split wgh is: " << split_weight << "\n";
-        std::cout << "fraction of sample composed by split_wgh = "
-                  << split_wgh_fraction << "\n";);
+  // gbbs_debug(std::cout << "split wgh is: " << split_weight << "\n";
+  //       std::cout << "fraction of sample composed by split_wgh = "
+  //                 << split_wgh_fraction << "\n";);
   st.stop();
   gbbs_debug(st.next("startup time"););
 
@@ -301,7 +301,7 @@ inline edge_array<W> get_top_k(symmetric_graph<vertex, W>& G, size_t k,
     // Special pred for performing extra hashing on edges with weight ==
     // split_wgh.
     double frac_to_take = (1.0 * (ind - first_ind)) / weight_size;
-    std::cout << "frac of split_weight to take: " << frac_to_take << "\n";
+    // std::cout << "frac of split_weight to take: " << frac_to_take << "\n";
     size_t range = (1L << parlay::log2_up(G.m)) - 1;
     size_t threshold = frac_to_take * range;
     // account for filtering directed edges
@@ -330,7 +330,7 @@ inline sequence<std::tuple<uintE, uintE, W>> MinimumSpanningForest(
   using vtxid_wgh_pair = std::pair<uintE, W>;
 
   size_t n = GA.n;
-  std::cout << "n = " << n << "\n";
+  // std::cout << "n = " << n << "\n";
   auto r = parlay::random();
 
   auto exhausted =
@@ -357,10 +357,10 @@ inline sequence<std::tuple<uintE, uintE, W>> MinimumSpanningForest(
   while (GA.m > 0) {
     timer round_t;
     round_t.start();
-    std::cout << "\n";
-    std::cout << "round = " << round << " n_active = " << n_active
-              << " GA.m = " << GA.m
-              << " MinimumSpanningForest size = " << mst_edges.size() << "\n";
+    // std::cout << "\n";
+    // std::cout << "round = " << round << " n_active = " << n_active
+    //           << " GA.m = " << GA.m
+    //           << " MinimumSpanningForest size = " << mst_edges.size() << "\n";
 
     // find a prefix of lowest-weight edges.
     size_t split_idx = std::min((3 * n) / 2, (size_t)GA.m);
@@ -376,8 +376,8 @@ inline sequence<std::tuple<uintE, uintE, W>> MinimumSpanningForest(
     get_t.stop();
     gbbs_debug(get_t.next("get time"););
     size_t n_edges = E.size();
-    std::cout << "Prefix size = " << split_idx << " #edges = " << n_edges
-              << " G.m is now = " << GA.m << "\n";
+    // std::cout << "Prefix size = " << split_idx << " #edges = " << n_edges
+    //           << " G.m is now = " << GA.m << "\n";
 
     // relabel edges
     auto& edges = E.E;
@@ -437,23 +437,23 @@ inline sequence<std::tuple<uintE, uintE, W>> MinimumSpanningForest(
       auto c_ngh = parents[ngh];
       return c_src == c_ngh;
     };
-    gbbs_debug(std::cout << "Filtering G, m = " << GA.m << "\n";);
+    // gbbs_debug(std::cout << "Filtering G, m = " << GA.m << "\n";);
     timer filter_t;
     filter_t.start();
     filter_edges(GA, filter_pred);
     filter_t.stop();
     filter_t.next("filter time");
-    std::cout << "After filter, m is now " << GA.m << "\n";
+    // std::cout << "After filter, m is now " << GA.m << "\n";
     round++;
     round_t.stop();
     round_t.next("round time");
 
     r = r.next();
   }
-  std::cout << "#edges in output mst: " << mst_edges.size() << "\n";
+  // std::cout << "#edges in output mst: " << mst_edges.size() << "\n";
   auto wgh_imap_f = [&](size_t i) { return std::get<2>(mst_edges[i]); };
-  auto wgh_imap = parlay::delayed_seq<size_t>(mst_edges.size(), wgh_imap_f);
-  std::cout << "total weight = " << parlay::reduce(wgh_imap) << "\n";
+  auto wgh_imap = parlay::delayed_seq<W>(mst_edges.size(), wgh_imap_f);
+  // std::cout << "total weight = " << parlay::reduce(wgh_imap) << "\n";
 
   gbbs::free_array(min_edges, n);
   return mst_edges;
diff --git a/gbbs/bridge.h b/gbbs/bridge.h
index 2dd65184..2b5f1ce7 100644
--- a/gbbs/bridge.h
+++ b/gbbs/bridge.h
@@ -302,7 +302,8 @@ inline bool write_min(ET* a, ET b, F less) {
   ET c;
   bool r = 0;
   do
-    c = *a;
+    // c = *a;
+    std::memcpy(&c, a, sizeof(ET));
   while (less(b, c) && !(r = atomic_compare_and_swap(a, c, b)));
   return r;
 }
diff --git a/gbbs/graph_mutation.h b/gbbs/graph_mutation.h
index c5323733..06d6bf75 100644
--- a/gbbs/graph_mutation.h
+++ b/gbbs/graph_mutation.h
@@ -232,8 +232,8 @@ edge_array<typename Graph::weight_type> filter_edges(Graph& G, P& pred,
   size_t total_space =
       std::get<2>(vtx_offs[n]);  // total space needed for all vertices
   size_t output_size = std::get<1>(vtx_offs[n]);
-  std::cout << "# tmp space to allocate = " << total_space
-            << " output size = " << output_size << "\n";
+  // std::cout << "# tmp space to allocate = " << total_space
+  //           << " output size = " << output_size << "\n";
   auto arr = sequence<edge>::uninitialized(output_size);
   auto tmp = sequence<std::tuple<uintE, W>>::uninitialized(total_space);
 
@@ -274,7 +274,7 @@ edge_array<typename Graph::weight_type> filter_edges(Graph& G, P& pred,
       n, [&](size_t i) { return G.get_vertex(i).out_degree(); });
 
   G.m = parlay::reduce(degree_imap);
-  std::cout << "# G.m is now = " << G.m << "\n";
+  // std::cout << "# G.m is now = " << G.m << "\n";
 
   return edge_array<W>(std::move(arr), n);
 }
@@ -303,7 +303,7 @@ edge_array<typename Graph::weight_type> filter_all_edges(Graph& G, P& p,
                        parlay::make_monoid(scan_f, std::make_tuple(0, 0)));
   size_t total_space = std::get<1>(offs[n]);
   auto tmp = sequence<std::tuple<uintE, W>>(total_space);
-  std::cout << "# tmp space allocated = " << total_space << "\n";
+  // std::cout << "# tmp space allocated = " << total_space << "\n";
 
   size_t total_edges = std::get<0>(offs[n]);
   auto arr = sequence<edge>(total_edges);
